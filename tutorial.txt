Welcome!
This is conQuer, a quantum circuit simulator.


In this brief introduction to quantum computation, we hope to give you a mathematical model to understand how quantum computation out performs classical computation.


\textrm{First, we have to assume a base level knowledge in vector and matrix operations. Specifically multiplication and tensor product.
} \newline \begin{pmatrix} a \\ b \end{pmatrix} \begin{pmatrix} c & d \\ e & f \end{pmatrix} = \begin{pmatrix} a \cdot c \enspace + \enspace b \cdot d \\ a \cdot e \enspace + \enspace b \cdot f \end{pmatrix} \newline \begin{pmatrix} a \\ b \end{pmatrix} \otimes \begin{pmatrix} c \\ d \end{pmatrix} = \begin{pmatrix} a \cdot c \\ a \cdot d \\ b \cdot c \\ b \cdot d \end{pmatrix}


\textrm{Quantum computation uses bits over the classical bits you may be used to. A qbit is represented by}\begin{pmatrix} a \\ b \end{pmatrix} \textrm{where }\|a\|^2 + \|b\|^2 = 1 \textrm{ and }a \textrm{ and }b \textrm{ can be an imaginary number, but don't worry about that for now.}


\textrm{Quantum computation uses logic gates similar to classical computation. Quantum gates can be represented by an } n \times n \textrm{ matrix where } n \textrm{ is 2 to the power of the number of qbits it operates on. The identity gate is represented by } \begin{pmatrix} 1 & 0 \\ 0 & 1 \end{pmatrix} \textrm{ when operating on one qbit. The cnot gate is represented by } \begin{pmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1 \end{pmatrix} \textrm{ when operating on two qbits. The quantum representation of the classical not gate is } \begin{pmatrix} 0 & 1 \\ 1 & 0 \end{pmatrix} \textrm{.}


\textrm{ One final gate to introduce is the Hadamard gate. It is represented by } \begin{pmatrix} \frac{1}{\sqrt{\smash[b]{2}}} & \frac{1}{\sqrt{\smash[b]{2}}} \\ \frac{1}{\sqrt{\smash[b]{2}}} & \frac{-1}{\sqrt{\smash[b]{2}}} \end{pmatrix} \textrm{ when operating on one qbit. Using these gates alone we can replicate the Deutsch Oracle problem, one of the simplest examples of where quantum computation out performs classical computation.}


We were heavily inspired by the YouTube video https://youtu.be/F_Riqjdh2oM. 
A large thank you to Andrew Helwer, Microsoft Research, and John Watrous for his invaluable lecture notes 
